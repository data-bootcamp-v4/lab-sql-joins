## Challenge - Joining on multiple tables

-- Write SQL queries to perform the following tasks using the Sakila database:

-- 1. List the number of films per category.

select 
	c.category_id, c.name as category_name, COUNT(f.film_id) as film_number
from category c
inner join film_category fc on c.category_id = fc.category_id
inner join film f on fc.film_id = f.film_id
group by c.category_id, c.name;

-- 2. Retrieve the store ID, city, and country for each store.

select
	s.store_id, c.city, co.country
from store s
inner join address a on s.address_id = a.address_id
inner join city c on a.city_id = c.city_id
inner join country co on c.country_id = co.country_id;	

-- 3.  Calculate the total revenue generated by each store in dollars.

select
	c.store_id, SUM(p.amount) as total_revenue
from payment p
inner join customer c on p.customer_id = c.customer_id
group by c.store_id;

-- 4.  Determine the average running time of films for each category.

select
	fc.category_id, avg(f.length) as average_running_time
from film_category fc
inner join film f on fc.film_id = f.film_id
group by fc.category_id;

-- 5.  Identify the film categories with the longest average running time.

select 
	c.category_id, c.name, avg(f.rental_duration) as average_running_time
from category c
inner join film_category fc on c.category_id = fc.category_id
inner join film f on fc.film_id = f.film_id
group by c.category_id, c.name
order by average_running_time;

-- 6.  Display the top 10 most frequently rented movies in descending order.

select 
	f.title, COUNT(*) as rental_count
from film f
inner join inventory i on f.film_id = i.film_id
inner join rental r on i.inventory_id = r.inventory_id
group by f.title
order by rental_count desc
limit 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

select
 f.film_id, f.title, s.store_id
from film f
inner join inventory i on f.film_id = i.film_id
inner join store s on i.store_id = s.store_id
where f.title = 'Academy Dinosaur';



