/*Welcome to the SQL Joins lab!

In this lab, you will be working with the Sakila database on movie rentals. Specifically, you will be practicing how to perform joins on multiple tables in SQL. Joining multiple tables is a fundamental concept in SQL, allowing you to combine data from different tables to answer complex queries. Furthermore, you will also practice how to use aggregate functions to calculate summary statistics on your joined data.

Challenge - Joining on multiple tables
Write SQL queries to perform the following tasks using the Sakila database:

List the number of films per category.
Retrieve the store ID, city, and country for each store.
Calculate the total revenue generated by each store in dollars.
Determine the average running time of films for each category.
Identify the film categories with the longest average running time.
Display the top 10 most frequently rented movies in descending order.
Determine if "Academy Dinosaur" can be rented from Store 1.
Here are some tips to help you successfully complete the lab:

Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:

Make sure you understand the relationships between the tables in the database. This will help you determine which tables to join and which columns to use in your joins.
Identify a common column for both tables to use in the ON section of the join. If there isn't a common column, you may need to add another table with a common column.
Decide which table you want to use as the left table (immediately after FROM) and which will be the right table (immediately after JOIN).
Determine which table you want to include all records from. This will help you decide which type of JOIN to use. If you want all records from the first table, use a LEFT JOIN. If you want all records from the second table, use a RIGHT JOIN. If you want records from both tables only where there is a match, use an INNER JOIN.
Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
Write the query
Tip 2: Break down the problem into smaller, more manageable parts. For example, you might start by writing a query to retrieve data from just two tables before adding additional tables to the join. Test your queries as you go, and check the output carefully to make sure it matches what you expect. This process takes time, so be patient and go step by step to build your query incrementally.*/

-- List the number of films per category


SELECT name, count(name) from sakila.film
JOIN sakila.film_category ON sakila.film.film_id = sakila.film_category.film_id
JOIN sakila.category on sakila.film_category.category_id = sakila.category.category_id
GROUP BY name;

-- Retrieve the store ID, city, and country for each store 

SELECT store_id, address, city, country FROM sakila.store
JOIN sakila.address ON sakila.store.address_id = sakila.address.address_id 
JOIN sakila.city ON sakila.address.city_id = sakila.city.city_id
JOIN sakila.country ON sakila.city.country_id = sakila.country.country_id;

-- Calculate the total revenue generated by each store in dollars.

SELECT staff.store_id, COUNT(amount) FROM sakila.payment
INNER JOIN sakila.staff ON payment.staff_id = staff.staff_id
GROUP BY staff.store_id;

 -- Determine the average running time of films for each category
 
SELECT sakila.category.category_id, avg(length) FROM sakila.category
JOIN sakila.film_category ON sakila.category.category_id = sakila.film_category.category_ID
JOIN sakila.film ON sakila.film_category.film_id = sakila.film.film_id
GROUP BY sakila.category.category_id;

-- Identify the film categories with the longest average running time.

SELECT sakila.category.category_id, avg(length) FROM sakila.category
JOIN sakila.film_category ON sakila.category.category_id = sakila.film_category.category_ID
JOIN sakila.film ON sakila.film_category.film_id = sakila.film.film_id
GROUP BY sakila.category.category_id
ORDER BY avg(length) DESC;

-- Display the top 10 most frequently rented movies in descending order

SELECT film_inv.title, COUNT(rental.rental_id)
FROM sakila.rental
INNER JOIN
	(SELECT title, inventory_id
	FROM sakila.film
	INNER JOIN sakila.inventory
	ON film.film_id = inventory.film_id) film_inv
ON rental.inventory_id = film_inv.inventory_id
GROUP BY film_inv.title
ORDER BY COUNT(rental.rental_id) DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT title FROM rental
INNER JOIN
	(SELECT title, inventory_id, store_id FROM sakila.film
	INNER JOIN sakila.inventory
	ON film.film_id = inventory.film_id) film_inv
ON film_inv.inventory_id = rental.inventory_id AND film_inv.title LIKE "Academy Dinosaur"
WHERE rental_date < return_date
LIMIT 1;
